% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reconstruct.R
\name{reconstruct}
\alias{reconstruct}
\title{Pedigree reconstruction}
\usage{
reconstruct(
  x,
  ids,
  alleleMatrix = NULL,
  loci = NULL,
  pedlist = NULL,
  inferPO = FALSE,
  sex = NULL,
  age = NULL,
  knownPO = NULL,
  allKnown = FALSE,
  notPO = NULL,
  connected = TRUE,
  maxLinearInb = Inf,
  sexSymmetry = TRUE,
  sortResults = TRUE,
  founderInb = 0,
  pairwise = NULL,
  genderSym = NULL,
  verbose = TRUE
)
}
\arguments{
\item{x}{A \code{ped} object or a list of such.}

\item{ids}{A vector of ID labels from \code{x}. By default, the genotyped members
of \code{x} are used.}

\item{alleleMatrix}{A matrix with two columns for each marker.}

\item{loci}{A list of marker attributes.}

\item{pedlist}{A list of pedigrees. If NULL, \code{\link[=buildPeds]{buildPeds()}} is used to
generate a list.}

\item{inferPO}{A logical. If TRUE, an initial stage of pairwise IBD
estimation is done, in order to infer certain parent-child pairs, as well
as certain \emph{non}-parent-child pairs. When this option is used, arguments to
\code{knownPO} and \code{notPO} are ignored.}

\item{sex}{A vector of the same length as \code{ids}, with entries 1 (male) or 2
(female).}

\item{age}{A numeric vector of the same length as \code{ids}. If \code{age[i]} is less
or equal to \code{age[j]}, individual \code{i} will not be an ancestor of individual
\code{j}. The numbers themselves are irrelevant, only the partial ordering.}

\item{knownPO}{A list of pairs of ID labels: The known parent-offspring
pairs.}

\item{allKnown}{A logical. If TRUE, no other pairs than \code{knownPO} will be
assigned as parent-offspring. If FALSE (default), all pairwise combinations
of ids - except those in \code{notPO} - will be treated as potential
parent-offspring pairs.}

\item{notPO}{A list of pairs of ID labels: Pairs known not to be
parent-offspring.}

\item{connected}{A logical. If TRUE (default), only connected pedigrees are
returned.}

\item{maxLinearInb}{A nonnegative integer, or \code{Inf} (default). If this is a
finite number, it disallows mating between pedigree members X and Y if X is
a linear descendant of Y separated by more than the given number. For
example, \code{maxLinearInb = 1} allows parent-child matings, but not
grandparent-grandchild or more distant. Setting \code{maxLinearInb = 0}
disallows all inbreeding of this type.}

\item{sexSymmetry}{A logical. If TRUE (default), pedigrees which are equal
except for the gender distribution of the \emph{added} parents, are regarded as
equivalent, and only one of each equivalence class is returned. Example:
paternal vs. maternal half sibs.}

\item{sortResults}{A logical. If TRUE, the output is sorted so that the most
likely pedigree comes first.}

\item{founderInb}{A number in the interval \verb{[0,1]}, used as background
inbreeding level in all founders}

\item{pairwise, genderSym}{Deprecated.}

\item{verbose}{A logical; verbose output or not}
}
\value{
An object of class \code{pedrec}, which is essentially list with the
following entries:
\itemize{
\item \code{pedlist}: A list of pedigrees, either built by \code{\link[=buildPeds]{buildPeds()}} or as
supplied in the input argument \code{pedlist}. If \code{sortResults = TRUE}, the
list is sorted so that the most likely pedigrees come first
\item \code{logliks}: A numerical vector containing the pedigree log-likelihoods
\item \code{alleleMatrix}: A matrix of marker alleles
\item \code{loci}: A list of marker locus attributes
\item \code{labels}: A character vector of ID labels
}
}
\description{
Reconstruct the most likely pedigree from genotype data
}
\examples{

# Load `forrel` (for simulation)
library(forrel)

### Example 1: Family trio
x = nuclearPed()
x = markerSim(x, N = 50, alleles = 1:3, seed = 123, verbose = FALSE)

# Reconstruct
res = reconstruct(x, inferPO = TRUE)

# Plot most likely pedigrees
plot(res, top = 6)

# Alternative workflow: Extract data manually...
m    = getAlleles(x)
loci = getLocusAttributes(x)
sex  = getSex(x)

# ...and then reconstruct
res2 = reconstruct(alleleMatrix = m, loci = loci, sex = sex,
                  inferPO = TRUE)

stopifnot(identical(res, res2))

### Example 2: Full siblings
ids = c("s1", "s2")
y = nuclearPed(children = ids)
y = markerSim(y, N = 50, ids = ids, seed = 123, verbose = FALSE)

# Reconstruct and plot
res3 = reconstruct(y, connected = FALSE)
plot(res3)

}
